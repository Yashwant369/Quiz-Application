package com.yashwant.quiz_application.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.yashwant.quiz_application.entity.CreateQuiz;
import com.yashwant.quiz_application.entity.Question;
import com.yashwant.quiz_application.entity.QuizResponse;
import com.yashwant.quiz_application.entity.SubmitResponse;
import com.yashwant.quiz_application.entity.User;
import com.yashwant.quiz_application.exceptions.ResourceNotFoundException;
import com.yashwant.quiz_application.repository.CreateQuizRepo;
import com.yashwant.quiz_application.repository.QuizResponseRepo;
import com.yashwant.quiz_application.repository.SubmitResponseRepo;
import com.yashwant.quiz_application.repository.UserRepo;
import com.yashwant.quiz_application.service.GetReportService;
import com.yashwant.quiz_application.util.GetReportRequest;
import com.yashwant.quiz_application.util.GetReportResponse;

@Service
public class GetReportServiceImpl implements GetReportService {
	
	@Autowired
	private CreateQuizRepo quizRepo;
	
	@Autowired
	private SubmitResponseRepo responseRepo;
	
	@Autowired
	private UserRepo userRepo;
	
	private  int calculateScore(List<Question>questions, List<QuizResponse>responses)
	{
		
		int score = 0;
		HashMap<String,String>map = new HashMap<>();
		for(Question q : questions)
		{
			String questionId = q.getQuestionId();
			String correctAnswer = q.getRightAnswer();
			map.put(questionId, correctAnswer);
		}
		for(QuizResponse res : responses)
		{
			String questionId = res.getQuestionId();
			String response = res.getSubmitAnswer();
			String answer = map.get(questionId);
			if(answer.equalsIgnoreCase(response))
			{
				score++;
			}
		}
		return score;
	}

	@Override
	public GetReportResponse getReport(GetReportRequest request) {
		// TODO Auto-generated method stub
		String quizId = request.getQuizId();
		String userId = request.getUserId();
		String userName = request.getUserName();
		
		CreateQuiz quiz = quizRepo.findById(quizId).orElseThrow(()-> 
		new ResourceNotFoundException("Quiz not found for given id : " + quizId));
		
		User user = userRepo.findById(userId).orElseThrow(()-> new ResourceNotFoundException("User"
				+ "not found for given id : " + userId));
		
		SubmitResponse response = responseRepo.findResponse(userId, quizId);
		if(response == null)
		{
			throw new ResourceNotFoundException("Response not found for user : " + userId);
		}
		List<Question>questions = quiz.getQuestions();
		List<QuizResponse>responses = response.getResponses();
		
//		for(QuizResponse re : responses)
//		{
//			System.out.println(re.getQuestionId() + " " + re.getSubmitAnswer() + " " +
//		re.getQuizResponseId());
//		}
		
		GetReportResponse reportResponse = new GetReportResponse();
		reportResponse.setClassNumber(quiz.getClassNumber());
		reportResponse.setQuizId(quizId);
		reportResponse.setSlot(quiz.getSlot());
		reportResponse.setUserEmail(user.getUserEmail());
		reportResponse.setUserId(userId);
		reportResponse.setUserName(userName);
		int score = calculateScore(questions, responses);
		reportResponse.setTotalMarks(score);
		List<Question_Response>list = new ArrayList<>();
		
		
		
		return null;
	}

}
