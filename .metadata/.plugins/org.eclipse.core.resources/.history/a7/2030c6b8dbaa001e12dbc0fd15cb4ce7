package com.yashwant.quiz_application.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.yashwant.quiz_application.dtos.QuestionDto;
import com.yashwant.quiz_application.service.impl.QuestionServiceImpl;
import com.yashwant.quiz_application.util.ApiResponse;
import com.yashwant.quiz_application.util.PageResponse;

@RestController
@RequestMapping("/question/")
public class QuestionController {
	
	@Autowired 
	private QuestionServiceImpl questionService;
	
	@PostMapping("/addQuestion")
	public ResponseEntity<QuestionDto>addQuestion(@RequestBody QuestionDto questionDto)
	{
		QuestionDto question = questionService.createQuestion(questionDto);
		return new ResponseEntity<>(question, HttpStatus.OK);
	}
	@PutMapping("/updateQuestion/{questionId}")
	public ResponseEntity<QuestionDto>updateQuestion(@RequestBody QuestionDto questionDto, 
			@PathVariable String questionId)
	{
		QuestionDto question = questionService.updateQuestion(questionId, questionDto);
		return new ResponseEntity<>(question, HttpStatus.OK);
		
	}
	@DeleteMapping("/deleteQuestion/{questionId}")
	public ResponseEntity<ApiResponse>deleteQuestion(@PathVariable String questionId)
	{
		ApiResponse response = questionService.deleteQuestion(questionId);
		return new  ResponseEntity<>(response, HttpStatus.OK);
	}
	@GetMapping("/getById/{questionId}")
	public ResponseEntity<QuestionDto>getQuestionById(@PathVariable String questionId)
	{
		QuestionDto questionDto = questionService.getQuestionById(questionId);
		return new ResponseEntity<>(questionDto, HttpStatus.OK);	
		
	}
	@GetMapping("/getAllQuestion")
	public ResponseEntity<PageResponse<QuestionDto>>getAllQuestion(
			@RequestParam(value = "pageNumber", defaultValue = "0", required = false)int pageNumber,
			@RequestParam(value = "pageSize", defaultValue = "5", required = false)int pageSize,
			@RequestParam(value = "sortBy", defaultValue = "questionTitle", required = false)String sortBy,
			@RequestParam(value = "sortDir", defaultValue = "asc", required = false)String sortDir)
	{
		PageResponse<QuestionDto>response = questionService.getAllQuestion(pageNumber, pageSize, sortBy, sortDir);
		return new ResponseEntity<>(response, HttpStatus.OK);
		
	}
	@GetMapping("/getByCategory/{category}")
	public ResponseEntity<PageResponse<QuestionDto>>getQuestionByCategory(@PathVariable String category,
			@RequestParam(value = "pageNumber", defaultValue = "0", required = false)int pageNumber,
			@RequestParam(value = "pageSize", defaultValue = "5", required = false)int pageSize,
			@RequestParam(value = "sortBy", defaultValue = "questionTitle", required = false)String sortBy,
			@RequestParam(value = "sortDir", defaultValue = "asc", required = false)String sortDir)
	{
		PageResponse<QuestionDto>response = questionService.getQuestionByCategory(category, pageNumber, pageSize, sortBy, sortDir)
	}
	

}
